$btn-border-radius: 3px;
$btn-font-weight: 600;
$btn-disabled-opacity: 0.4;
$btn-block-spacing-y: 1rem;
$animation-timing: 0.3s;

$btn-sizes: (
  small: (
    font-size: font-size(xxs),
    padding: spacing(2) spacing(3)
  ),
  regular: (
    font-size: font-size(xs),
    padding: spacing(3) spacing(4)
  ),
  large: (
    font-size: font-size(s),
    padding: spacing(3) spacing(5)
  )
);

$btn-states: (
  neutral: (
    color: color("neutral", 800),
    background: color("neutral", 700)
  ),
  primary: (
    color: color("primary", 700),
    background: color("primary", 400)
  ),
  danger: (
    color: color("danger", 700),
    background: color("danger", 400)
  ),
  warning: (
    color: color("warning", 700),
    background: color("warning", 400)
  ),
  success: (
    color: color("success", 700),
    background: color("success", 500)
  )
);


.rn-btn {

  border-radius: $btn-border-radius;
  border: 1px solid transparent;
  cursor: pointer;
  display: inline-block;
  font-weight: $btn-font-weight;
  line-height: 1;
  text-align: center;
  vertical-align: middle;
  user-select: none;
  transition: all $animation-timing;

  @include hover {
    text-decoration: none;
  }

  &:focus,
  &.focus {
    outline: 0;
  }

  &--primary,
  &--secondary,
  &--tertiary {
    @extend .rn-btn;    
  }
 
    
  &--primary {
    color: color(neutral, white);
    @each $state, $variation in $btn-states {
      &.#{$state} {        
        background: map-get($variation, "background");
        @include hover {
          background-color: darken(map-get($variation, "background"), 10);
        }
      }
    }
  }

  &--secondary {
    @each $state, $variation in $btn-states {
      &.#{$state} {
        background-color: color(neutral, 000);
        color: map-get($variation, "color");
        @include hover {
          background-color: color(neutral, 100);
        }
      }
    }
  }

  &--tertiary {
    @each $state, $variation in $btn-states {
      &.#{$state} {
        background-color: transparent;
        color: map-get($variation, "color");        
        @include hover {
          background-color: color(neutral, 50);
          border: 1px solid color(neutral, 100);
        }
      }
    }
  }

  // Providing default sizing
  font-size: map-deep-get($btn-sizes, "regular", "font-size");
  padding: map-deep-get($btn-sizes, "regular", "padding");

  @each $size, $values in $btn-sizes {
    &.#{$size} {
      font-size: map-get($values, "font-size");
      padding: map-get($values, "padding");
    }
  }

  &.block {
    width: 100%;
    + .rn-btn.block {
      margin-top: $btn-block-spacing-y;
    }
  }

  &.disabled,
  &:disabled {
    pointer-events: none;
    opacity: $btn-disabled-opacity;
  }
  
}


// Specificity overrides
input[type="submit"],
input[type="reset"],
input[type="button"] {
  &.rn-btn.block {
    width: 100%;
  }
}

a.rn-btn.disabled,
fieldset:disabled a.btn {
  pointer-events: none;
}